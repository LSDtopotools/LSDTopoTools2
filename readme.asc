= LSDTopoTools 0.5

image:https://travis-ci.org/LSDtopotools/LSDTopoTools_CRNBasinwide.svg?branch=master[link="https://travis-ci.org/LSDtopotools/LSDTopoTools2"]
image:https://img.shields.io/badge/License-GPL%20v3-blue.svg[link="https://www.gnu.org/licenses/gpl-3.0"]

== Overview

This is the *LSDTopoTools2* software package. It is part of the *LSDTopoTools* family of topographic analysis tools. These include:

* *LSDTopoTools2*: A series of command line tools that are used for topographic analysis. Installation instructions below.
* *lsdviztools*: A python package for visualising *LSDTopoTools2* outputs. See https://github.com/LSDtopotools/lsdviztools
* *lsdtopytools*: The python bindings for *LSDTopoTools*. Still under construction. https://github.com/LSDtopotools/lsdtopytools

The *LSDTopoTools2* repository contains the source code for 6 command line tools:

* `lsdtt-basic-metrics`: Basic topographic analysis. Surface metrics, basic channel and basin extraction, raster preprocessing and other simple routines.
* `lsdtt-channel-extraction`: Extracts channels. This uses a variety of algorthims suited for topographic data that is better than 10m grid resolution and ideally from lidar data (3m resolution or better).
* `lsdtt-chi-mapping`: Routines for so-called chi analysis: this is used in tectonic geomorphology.
* `lsdtt-cosmo-tool`: Tools for calculating erosion rates based on 10Be and 26Al concentrations measured in stream sediments and soils.
* `lsdtt-hillslope-channel-coupling`: Routines for hilltop flow routing and linking ridgetop pixels to channels.
* `lsdtt-valley-metrics`: Routines for valley and terrace extraction

== Documentation

* You can see all the options by using a `-h` flag after the command line tool.
* You can see the version using the `-v` flag
* The main documentation for *LSDTopoTools* can be found here: https://lsdtopotools.github.io/LSDTT_documentation/
* Full installation instructions: https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_installation.html
** The shortcut is to install https://docs.conda.io/en/latest/miniconda.html[miniconda] and then run `conda install lsdtopotools`
* Simple usage is explained in https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_basic_usage.html

== Update history

* `0.5` Now includes help files. 

== Basic Installation

Below are several methods for installing *LSDTopoTools2*.

=== Conda installation

. Install https://docs.conda.io/en/latest/miniconda.html[miniconda]
. Set up an environment (if you don't know how to do that use google)
. `$ conda install -c conda-forge lsdtopotools`
+
WARNING: Currently doesn't work on Windows.

=== Use the docker container

. Install https://www.docker.com/products/docker-desktop[docker for windows io MacOS], or https://docs.docker.com/engine/install/ubuntu/[docker engine on linux]
. Pull our full *lsdtopotools* container:
+
[source,console]
----
$ docker pull lsdtopotools/lsdtt_pytools_docker
----
+
. Run the container
+
[source,console]
----
$ docker run -it -v C:\LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_pytools_docker
----
+
. *LSDTopoTools2* is already installed!
. You can alternatively use *LSDTopoTools through an interactive environment using this container. See the readme here: https://hub.docker.com/r/lsdtopotools/lsdtt_pytools_docker


=== Build locally

. Clone the repository.
. Run:
+
[source,console]
----
$ sh lsdtt2_setup.sh
----
+
. Now you can run the programs from within your terminal system.

=== Build locally alternative method (but `lsdtt2_setup.sh` is easier)

. Clone the repository.
. Go into the `src` directory.
. Run
+
[source,console]
----
$ sh build.sh
----
+
. This compiles the source code. The programs will be moved into the `bin` directory. To make these accessible from anywhere in your current terminal session, you need to:
.. Go into the main repository directory (if you are in `src`, then use `cd ..`).
.. Run:
+
[source,console]
----
$ sh lsdtt2_terminal.sh
----
+

